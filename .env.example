# Configuración de entorno para Citrino

# ============================================
# BACKEND API (Render.com)
# ============================================

# Entorno de ejecución
FLASK_ENV=production
PORT=5001

# URL de GitHub Pages (para CORS)
GITHUB_PAGES_URL=https://tu-usuario.github.io/citrino-clean

# ============================================
# INTEGRACIÓN Z.AI (Primario)
# ============================================

# API Key de Z.AI (obtener en https://z.ai/model-api)
ZAI_API_KEY=tu_clave_zai_aqui

# Proveedor de LLM (zai, openai, openrouter)
LLM_PROVIDER=zai

# Modelo a utilizar
# Opciones: glm-4.6 (recomendado 2025), glm-4.5, glm-4.5-air
LLM_MODEL=glm-4.6

# ============================================
# FALLBACK LLM - OPENROUTER (2025)
# ============================================

# Habilitar fallback automático cuando z.ai falle (rate limit, errores)
OPENROUTER_FALLBACK_ENABLED=true

# OpenRouter API Key (obtener en https://openrouter.ai/keys)
OPENROUTER_API_KEY=your_openrouter_api_key_here

# Modelo de fallback gratuito
# Opciones recomendadas 2025:
#   - qwen/qwen-2.5-72b-instruct:free (recomendado, optimizado para JSON)
#   - deepseek/deepseek-r1:free (razonamiento superior)
#   - meta-llama/llama-4-maverick:free (robusto, multimodal)
OPENROUTER_MODEL=qwen/qwen-2.5-72b-instruct:free

# ============================================
# CONFIGURACIÓN GENERAL LLM
# ============================================

LLM_MAX_TOKENS=8000
LLM_TEMPERATURE=0.1

# ============================================
# FRONTEND (GitHub Pages)
# ============================================

# URL del backend en producción (configurar en index.html si es necesario)
# CITRINO_API_URL=https://citrino-api.onrender.com/api

# ============================================
# NOTAS DE CONFIGURACIÓN
# ============================================

# 1. Para desarrollo local:
#    - FLASK_ENV=development
#    - PORT=5001
#    - No es necesario configurar GITHUB_PAGES_URL

# 2. Para producción en Render:
#    - Copiar estas variables en el Dashboard de Render
#    - Configurar ZAI_API_KEY como variable secreta
#    - FLASK_ENV=production

# 3. Para GitHub Pages:
#    - Configurar CITRINO_API_URL en window si es necesario
#    - O dejar que api.js use el valor por defecto

# 4. Obtener API Key de Z.AI:
#    - Visitar https://z.ai/model-api
#    - Crear cuenta
#    - Generar API Key
#    - Copiar en ZAI_API_KEY

# ============================================
# BASE DE DATOS POSTGRESQL + POSTGIS (Sprint 1)
# ============================================

# Configuración PostgreSQL
DB_HOST=localhost
DB_PORT=5432
DB_NAME=citrino
DB_USER=postgres
DB_PASSWORD=tu_password_aqui

# Configuración de Conexión
DB_POOL_SIZE=5
DB_MAX_OVERFLOW=10
DB_POOL_TIMEOUT=30
DB_POOL_RECYCLE=3600

# Opciones de Rendimiento PostgreSQL
POSTGRESQL_SHARED_BUFFERS=256MB
POSTGRESQL_EFFECTIVE_CACHE_SIZE=1GB
POSTGRESQL_MAINTENANCE_WORK_MEM=64MB
POSTGRESQL_CHECKPOINT_COMPLETION_TARGET=0.9

# Configuración PostGIS
POSTGIS_ENABLE_OUTDB_RASTERS=1
POSTGIS_GDAL_ENABLED_DRIVERS=ENABLE_ALL

# Configuración de Migración
MIGRATION_BATCH_SIZE=1000
MIGRATION_PARALLEL_WORKERS=4
MIGRATION_VALIDATION_ENABLED=true
MIGRATION_BACKUP_ENABLED=true

# Paths de Directorios para Migración
MIGRATION_RAW_DIR=data/raw
MIGRATION_INTERMEDIATE_DIR=data/intermedio
MIGRATION_VALIDATED_DIR=data/intermedio/validados
MIGRATION_LOGS_DIR=data/postgres/logs
MIGRATION_BACKUPS_DIR=data/postgres/backups

# Configuración de Coordenadas (Santa Cruz de la Sierra)
SANTA_CRUZ_LAT_MIN=-18.5
SANTA_CRUZ_LAT_MAX=-17.5
SANTA_CRUZ_LON_MIN=-63.5
SANTA_CRUZ_LON_MAX=-63.0
SANTA_CRUZ_SRID=4326

# ============================================
# NOTAS DE CONFIGURACIÓN POSTGRESQL
# ============================================

# 1. Requisitos para PostgreSQL:
#    - PostgreSQL 15+ con PostGIS 3.3+
#    - Espacio en disco: ~2GB para 1,588 propiedades + 4,777 servicios
#    - RAM recomendada: 4GB+ para rendimiento óptimo
#    - CPU: 4+ cores para procesamiento paralelo

# 2. Instalación de PostGIS:
#    sudo apt-get install postgresql-15-postgis-3
#    CREATE EXTENSION postgis;
#    CREATE EXTENSION postgis_topology;

# 3. Configuración de postgresql.conf:
#    shared_buffers = 256MB
#    effective_cache_size = 1GB
#    maintenance_work_mem = 64MB
#    checkpoint_completion_target = 0.9
#    wal_buffers = 16MB
#    default_statistics_target = 100
#    random_page_cost = 1.1
#    effective_io_concurrency = 200

# 4. Configuración de pg_hba.conf:
#    local   all             postgres                                peer
#    host    all             all             127.0.0.1/32            md5

# 5. Para ejecutar migración completa:
#    # 1) Crear base de datos
#    createdb citrino
#
#    # 2) Habilitar PostGIS
#    psql -d citrino -c "CREATE EXTENSION postgis;"
#
#    # 3) Ejecutar schema
#    psql -d citrino -f data/postgres/scripts/01_create_schema.sql
#
#    # 4) Ejecutar ETLs en orden:
#    python data/postgres/scripts/etl_excel_to_intermediate.py
#    python data/postgres/scripts/etl_guia_to_intermediate.py
#    python data/postgres/scripts/etl_consolidar_agentes.py
#    python data/postgres/scripts/etl_intermediate_to_postgres.py
#
#    # 5) Validar migración
#    python data/postgres/scripts/etl_validate_migration.py
